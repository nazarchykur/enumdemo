package org.example.enumdemo.withmethods;

import java.util.EnumMap;
import java.util.Map;

/**
 * –ü—Ä–∏–∫–ª–∞–¥ ‚Ññ6: Enum —ñ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏, –ø—É–±–ª—ñ—á–Ω–∏–º–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
 *
 * –ë—ñ–∑–Ω–µ—Å-–∫–µ–π—Å: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏.
 *
 * –ö–æ–∂–µ–Ω –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –º–∞—î:
 *  - baseRate (–±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ –∑–∞ –∫–º)
 *  - multiplier (–º–Ω–æ–∂–Ω–∏–∫, —â–æ –≤—Ä–∞—Ö–æ–≤—É—î –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: –≥–æ–¥–∏–Ω–∏ –ø—ñ–∫, –∫–æ–º—Ñ–æ—Ä—Ç —ñ —Ç.–¥.)
 *
 * –ú–µ—Ç–æ–¥–∏:
 *  - –ø—Ä–∏–≤–∞—Ç–Ω–∏–π: –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É (baseRate * multiplier)
 *  - –ø—É–±–ª—ñ—á–Ω–∏–π: API calculateCost() –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω–∏ –ø–æ—ó–∑–¥–∫–∏
 *  - —Å—Ç–∞—Ç–∏—á–Ω–∏–π: getTariffMap() –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ EnumMap {TransportType ‚Üí —Ç–∞—Ä–∏—Ñ –∑–∞ –∫–º}
 */
public class WithMethodsDemo2 {

    public static void main(String[] args) {
        double distance = 10.0; // –∫–º

        // 1Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
        System.out.println("1. Trip cost examples:");
        System.out.println("- BUS cost for " + distance + " km = " + TransportType2.BUS.calculateCost(distance));
        System.out.println("- TRAIN cost for " + distance + " km = " + TransportType2.TRAIN.calculateCost(distance));
        System.out.println("- TAXI cost for " + distance + " km = " + TransportType2.TAXI.calculateCost(distance));

        // 2Ô∏è‚É£ –î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤ –Ω–∞–ø—Ä—è–º—É
        System.out.println("\n2. Base rates:");
        for (TransportType2 type : TransportType2.values()) {
            System.out.println("- " + type.name() + " base rate = " + type.getBaseRate());
        }

        // 3Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è EnumMap
        Map<TransportType2, Double> tariffMap = TransportType2.getTariffMap();
        System.out.println("\n3. Final tariff map (baseRate * multiplier):");
        tariffMap.forEach((k, v) -> System.out.println("- " + k.name() + " = " + v + " per km"));

        // 4Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ name
        System.out.println("\n4. All available transport types:");
        for (TransportType2 type : TransportType2.values()) {
            System.out.println("- " + type.name());
        }
    }
}

/**
 * Enum TransportType
 *
 * ‚úÖ –ü–æ–ª—è:
 *   - baseRate: –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ –∑–∞ –∫–º
 *   - multiplier: –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç (–≥–æ–¥–∏–Ω–∏ –ø—ñ–∫, –∫–æ–º—Ñ–æ—Ä—Ç, —à–≤–∏–¥–∫—ñ—Å—Ç—å)
 *
 * ‚úÖ –ú–µ—Ç–æ–¥–∏:
 *   - private double calculateTariff(): —ñ–Ω–∫–∞–ø—Å—É–ª—é—î —Ñ–æ—Ä–º—É–ª—É (baseRate * multiplier)
 *   - public double calculateCost(distance): API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥)
 *   - static Map getTariffMap(): —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤
 */
enum TransportType2 {
    BUS(2.5, 1.0),
    TRAIN(1.8, 0.9),
    TAXI(10.0, 1.5);

    private final double baseRate;
    private final double multiplier;

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–∂–¥–∏ private, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è JVM –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    TransportType2(double baseRate, double multiplier) {
        this.baseRate = baseRate;
        this.multiplier = multiplier;
    }

    // Getter –¥–ª—è –±–∞–∑–æ–≤–æ—ó —Ü—ñ–Ω–∏
    public double getBaseRate() {
        return baseRate;
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî —ñ–Ω–∫–∞–ø—Å—É–ª—å–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞
    private double calculateTariff() {
        return baseRate * multiplier;
    }

    // –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    public double calculateCost(double distanceKm) {
        return calculateTariff() * distanceKm;
    }

    // –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ EnumMap (—à–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞—Ä–∏—Ñ—ñ–≤)
    public static Map<TransportType2, Double> getTariffMap() {
        EnumMap<TransportType2, Double> map = new EnumMap<>(TransportType2.class);
        for (TransportType2 type : values()) {
            map.put(type, type.calculateTariff());
        }
        return map;
    }
}

/*
üìò –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (–¥–µ—Ç–∞–ª—å–Ω–µ)
    üîπ –ü–æ–ª—è
        baseRate ‚Üí –ø–æ—Ç—Ä—ñ–±–Ω–µ, —â–æ–± –º–∞—Ç–∏ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É —Ç–∞—Ä–∏—Ñ–∞—Ö —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó).
        multiplier ‚Üí –ø–æ–∫–∞–∑—É—î, —â–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–≤–∞ —Ç–∏–ø–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –±–∞–∑—É, –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, TAXI —É –≥–æ–¥–∏–Ω–∏ –ø—ñ–∫).

    üîπ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        –ó–∞–≤–∂–¥–∏ private.
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±–∏–¥–≤–∞ –ø–æ–ª—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏.
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è JVM –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è BUS, TRAIN, TAXI.

    üîπ –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥
        private double calculateTariff() {
            return baseRate * multiplier;
        }

        –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –±—ñ–∑–Ω–µ—Å-—Ñ–æ—Ä–º—É–ª—É.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ –≤ calculateCost(), —ñ –≤ getTariffMap().
        –¢–µ–ø–µ—Ä –≤—ñ–Ω —Å–ø—Ä–∞–≤–¥—ñ –º–∞—î —Å–µ–Ω—Å, –±–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–ª–µ, –∞ –≤–∏–∫–æ–Ω—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.

        –ö–æ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏?
            –Ø–∫—â–æ —Ñ–æ—Ä–º—É–ª—É –º–æ–∂–Ω–∞ –±—É–¥–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ, —ñ –≤–æ–Ω–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–ø—Ä—è–º—É.

    üîπ –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥
        public double calculateCost(double distanceKm) {
            return calculateTariff() * distanceKm;
        }

        –¶–µ —á–∏—Å—Ç–∏–π API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Üí –º–∏ –¥–∞—î–º–æ –≥–æ—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π.

        –ö–æ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏?
            –ö–æ–ª–∏ –º–∏ —Ö–æ—á–µ–º–æ —Å—Ö–æ–≤–∞—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —ñ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    üîπ –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥
        public static Map<TransportType, Double> getTariffMap()
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ EnumMap.
        –î–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞—Ä–∏—Ñ—ñ–≤ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä—É values() —â–æ—Ä–∞–∑—É.

        –ö–æ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏?
            –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–µ—à–æ–≤–∞–Ω–∏–π —á–∏ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—ñ–≤, API-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π).

üìå –í–∏—Å–Ω–æ–≤–∫–∏
    –ü–æ–ª—è = –¥–∞–Ω—ñ, —â–æ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å –ø–æ–≤–µ–¥—ñ–Ω–∫—É enum.
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä = —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ, –∑–∞–≤–∂–¥–∏ private, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è JVM.
    –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ = –¥–ª—è —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—ó —Ñ–æ—Ä–º—É–ª —á–∏ –ª–æ–≥—ñ–∫–∏, —è–∫—É –Ω–µ –≤–∞—Ä—Ç–æ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É.
    –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ = API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ enum, –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –°—Ç–∞—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏ = —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —É—Å—ñ–º enum (–ø–æ—à—É–∫, –∫–µ—à—É–≤–∞–Ω–Ω—è, EnumMap).
 */